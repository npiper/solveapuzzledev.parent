<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

    <!-- Template Spring boot Project file for my projects - based on https://maven.apache.org/pom.html 
    
      Examples / Dependencies sourced from: https://spring.io/guides/gs/spring-boot/

     -->
  
    <groupId>com.solveapuzzldev</groupId>
    <artifactId>parent.github</artifactId>
    <!-- Default starting version is 0-SNAPSHOT -->
    <version>0-SNAPSHOT</version>
    <packaging>minimumJavaVersion</packaging>

    <!-- Spring boot parent -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>${springbootVersion}</version>
    </parent>
    <dependencies>
       <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>

     <!-- Modules, sub-modules & properties -->
  <modules/>
  <properties>
      <project.name>PROJECT.NAME</project.name>
      <!-- Enforces these minimum versions on build -->
      <miniumumMavenVersion>3.1</miniumumMavenVersion>
      <minimumJavaVersion>1.8</minimumJavaVersion>
      <springbootVersion>1.3.3.RELEASE</springbootVersion>

      <!-- Default maven plugin versions -->
      <mavenReleasePluginVersion>2.5.3</mavenReleasePluginVersion>
      <mavenCheckstylePluginVersion>2.17</mavenCheckstylePluginVersion>
      <mavenEnforcerPluginVersion>1.4.1</mavenEnforcerPluginVersion>
      <codehauseCorbeturaPluginVersion>2.7</codehauseCorbeturaPluginVersion>
  </properties>



  <!-- BUILD SETTINGS --> 

<build>
    <pluginManagement>
      <plugins>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-release-plugin</artifactId>
          <version>${mavenReleasePluginVersion}</version>
          <!-- Take the latest ?? 
          <version>2.1</version>
          <version>2.5.3</version>
           -->
          <!-- By default, don't independently manage sub-modules by version--> 
          <configuration>
            <autoVersionSubmodules>true</autoVersionSubmodules>
          </configuration>
        </plugin>

        <!-- Checkstyle -->
         <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>${mavenCheckstylePluginVersion}</version>

          <executions>
     <execution>
       <id>validate</id>
       <phase>validate</phase>
       <configuration>
           <!-- Google checks - built in 
             http://checkstyle.sourceforge.net/google_style.html -->
         <configLocation>google_checks.xml</configLocation>
         <encoding>UTF-8</encoding>
         <consoleOutput>true</consoleOutput>
         <failsOnError>true</failsOnError>
         <linkXRef>false</linkXRef>
       </configuration>
       <goals>
         <goal>check</goal>
       </goals>
     </execution>
   </executions>
        </plugin>

        <!-- Coverage -->


        <!-- ENFORCER !! -->
          <!-- Java 1.7+ -->
          <!-- Maven 3.2+ -->
<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>${mavenEnforcerPluginVersion}</version>
        <executions>
          <execution>
            <id>enforce-java</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <!-- Java >= 1.7 -->
                <requireJavaVersion>
                  <version>${minimumJavaVersion}</version>
                </requireJavaVersion>
 
                <!-- Maven >= 3.1 -->
                <requireMavenVersion>
                  <version>${miniumumMavenVersion}</version>
                </requireMavenVersion>

              </rules>    
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Springboot maven plugin -->

         <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>


      </plugins>
    </pluginManagement>
  </build>

 

  <!-- REPORTING -->
  <!-- Checkstyle -->
  <!-- Corbetura -->
  <reporting>
    <plugins>

      <!-- Checkstyle -->
       <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>${mavenCheckstylePluginVersion}</version>
          <reportSets>
            <reportSet>
              <reports>
                <report>checkstyle</report>
              </reports>
            </reportSet>
          </reportSets>
        </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
        <version>${codehauseCorbeturaPluginVersion}</version>
      </plugin>
    </plugins>
  </reporting>

  <!-- PROJECT INFORMATION -->

    <!-- Name of the project or module , typically more than just the artifactId i.e. Java 1.5 = 'tiger', printed in the execution, build. Not mandatory but useful. -->
  <name>${project.name}</name>

  <!-- Description of a project is always good, helps POM readers -->
  <description>
    PROJECT.DESCRIPTION
  </description>

  <!-- URL is helpful for maintenance on where to find the source code, project site. -->
  <url>https://github.com/npiper/${project.name}/</url>
  <!-- When did this all start...? -->
  <inceptionYear>PROJECT.STARTYEAR</inceptionYear>

    <!-- I'm choosing Apache, permissive, but patent rights for contributors, to users.
   http://choosealicense.com/ -->
   <!-- legal documents defining how and when a project (or parts of a project) may be used -->
  <licenses>
    <license>
    <name>Apache License, Version 2.0</name>
    <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
    <distribution>repo</distribution>
    </license>
  </licenses>


  <!-- Typically only core dev team, leads, buildmasters. If the person should not be contacted about the project or initiative, they need not be listed here -->
    <developers>
    <developer>
      <id>npiper</id>
      <name>Neil Piper</name>
      <email>solveapuzzledev@gmail.com<email>
      <url>https://www.linkedin.com/in/piperneil</url>
      <!--
      <organization>ACME</organization>
      <organizationUrl>http://www.example.com</organizationUrl>
    -->
      <roles>
        <role>architect</role>
        <role>developer</role>
      </roles>
      <timezone>Australia/Melbourne</timezone>
    </developer>
  </developers>

  <!-- ENVIRONMENT & RELEASE SETTINGS -->

  <!-- Where / Which system to raise issues in, can be used by plugins but typically for project / site documentation. -->
  <issueManagement>
    <system>github</system>
    <url>https://github.com/npiper/${project.name}/issues</url>
  </issueManagement>

  <!-- Not bothering with this, using VM's and the artifactory build is more relevant -->
  <ciManagement/>


  <!-- Mailing lists are a great tool for keeping in touch with people about a project. Most mailing lists are for developers and users. -->
  <mailingLists>
    <mailingList>
      <name>PROJECT Developer mailing list</name>
      <subscribe>aether-dev-subscribe@sonatype.org</subscribe>
      <unsubscribe>aether-dev-unsubscribe@sonatype.org</unsubscribe>
      <post>aether-dev@sonatype.org</post>
      <!-- archive>?</archive>  URL of old mailing list archives -->
    </mailingList>
  </mailingLists>

  <!-- Software configuration management details -->
  <!-- Critical for the mvn:release plugin & process, where to find the source code. -->
  <scm>
    <connection>scm:git:git@github.com:npiper/${project.name}.git</connection>
    <developerConnection>scm:git:git@github.com:npiper/${project.name}.git</developerConnection>
    <url>https://github.com/npiper/${project.name}/</url>
  </scm>

<!-- REPOSITORIES & PLUGIN REPOSITORIES -->
  <repositories/>
  <pluginRepositories/>


    <!--manages the distribution of the artifact and supporting files during build, release process.  Critical for the mvn:deploy & mvn:release process -->
  <distributionManagement>

   <!-- Release repository based on use of https://bitbucket.org/n_piper/environment.buildfarm -->
   <repository>
      <id>release-local</id>
      <name>release-local</name>
      <url>http://solveapuzzledev-repo:8081/artifactory/libs-release-local</url>
    </repository>

    <!-- Snapshot repository based on https://bitbucket.org/n_piper/environment.buildfarm -->
    <snapshotRepository>
      <uniqueVersion>true</uniqueVersion>
      <id>snapshot-local</id>
      <name>snapshot-local  </name>
      <url>http://solveapuzzledev-repo:8081/artifactory/libs-snapshot-local</url>
    </snapshotRepository>

    <!-- Where the pages go -->
    <site>
      <id>gh-pages</id>
      <url>http://npiper.github.io/${project.name}/</url>
    </site>
  </distributionManagement>

<!-- PROFILES   Build & Deploy Profiles -->

 <profiles>

  </profiles>

 
</project>
